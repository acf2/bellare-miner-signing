(defparameter argv (apply-argv:parse-argv (loop for elem in (rest *posix-argv*)
                                                collect (coerce elem 'string))))
(defparameter current-dir (pathname-directory *default-pathname-defaults*))

(defun getf-int (p-list key)
  (when (getf p-list key)
    (parse-integer (getf p-list key) :junk-allowed t)))

(defmacro setf-if-not-nil (place value)
  `(when (not (null ,value))
     (setf ,place ,value)))

(defmacro fail-quit (&rest symbol-quitmsg-list)
  (let ((fail (gensym)))
    `(let ((,fail nil))
       ,@(loop for symbol-quitmsg-pair in symbol-quitmsg-list
               collect `(unless ,(first symbol-quitmsg-pair)
                          (format t ,(second symbol-quitmsg-pair))
                          (setf ,fail t)))
       (when ,fail (sb-ext:exit)))))

(setf-if-not-nil bellare-miner:*boundary* (getf-int argv :bits))
(setf-if-not-nil bellare-miner:*challenge-length* (getf-int argv :points))

(defun generate-key (private-key-file public-key-file time-periods)
  (fail-quit (private-key-file "You should specify private key filename for generation of the key~%")
             (public-key-file "You should specify public key filename for generation of the key~%")
             (time-periods "You should specify number of time periods for generation of the key~%"))
  (let ((key (bellare-miner:generate-key time-periods)))
    (with-standard-io-syntax
      (with-open-file (pub-out public-key-file :direction :output :if-exists :supersede)
        (format pub-out "~S~%" (getf key :public-key)))
      (with-open-file (prv-out private-key-file :direction :output :if-exists :supersede)
        (format prv-out "~S~%" (getf key :private-key))))))

(defun update-key (private-key-file)
  (fail-quit (private-key-file "Please specify private key for update~%"))
  (let (private-key)
    (with-standard-io-syntax
      (with-open-file (prv-in private-key-file :direction :input :if-does-not-exist nil)
        (setf private-key (and private-key-file (read prv-in)))))
    (fail-quit (private-key "Private key is not valid~%"))
    (setf private-key (bellare-miner:update-key private-key))
    (with-standard-io-syntax
      (with-open-file (prv-out private-key-file :direction :output :if-exists :supersede)
        (format prv-out "~S~%" private-key)))))

(defun sign (message-file private-key-file signature-file)
  (fail-quit (private-key-file "You should specify a private key for signing")
             (message-file "You can not sign nothing: please specify a file to sign")
             (signature-file "Please, provide a signature file name"))
  (let (private-key message signature)
    (with-standard-io-syntax
      (with-open-file (prv-in private-key-file :direction :input :if-does-not-exist nil)
        (setf private-key (and prv-in (read prv-in))))
      (with-open-file (msg-in message-file :element-type '(unsigned-byte 8) :direction :input :if-does-not-exist nil)
        (loop with buffer = (make-array 4096 :element-type '(unsigned-byte 8))
              with bytes
              do (setf bytes (read-sequence buffer msg-in))
              do (setf message (concatenate '(vector (unsigned-byte 8)) message (subseq buffer 0 bytes)))
              while (= bytes 4096))))
    (setf signature (bellare-miner:sign message private-key))
    (with-standard-io-syntax
      (with-open-file (sgn-out signature-file :direction :output :if-exists :supersede)
        (format sgn-out "~S~%" signature)))))

(defun verify (message-file signature-file public-key-file)
  (fail-quit (public-key-file "You should specify a public key for verifying")
             (message-file "You can not verify nothing: please specify a file")
             (signature-file "You should provide a signature to check"))
  (let (public-key message signature)
    (with-standard-io-syntax
      (with-open-file (pub-in public-key-file :direction :input :if-does-not-exist nil)
        (setf public-key (and pub-in (read pub-in))))
      (with-open-file (msg-in message-file :element-type '(unsigned-byte 8) :direction :input :if-does-not-exist nil)
        (loop with buffer = (make-array 4096 :element-type '(unsigned-byte 8))
              with bytes
              do (setf bytes (read-sequence buffer msg-in))
              do (setf message (concatenate '(vector (unsigned-byte 8)) message (subseq buffer 0 bytes)))
              while (= bytes 4096)))
      (with-open-file (sgn-in signature-file :direction :input :if-does-not-exist nil)
        (setf signature (and sgn-in (read sgn-in)))))
    (if (bellare-miner:verify message signature public-key)
      (format t "~A: valid signature for '~A'~%" signature-file message-file)
      (format t "~A: INVALID SIGNATURE FOR '~A'~%ATTENTION: MESSAGE WAS MODIFIED OR SIGNATURE WAS FORGED~%" signature-file message-file))))

(cond
  ((getf argv :generate-key)
   (generate-key (getf argv :private-key)
                 (getf argv :public-key)
                 (getf-int argv :time-periods)))
  ((getf argv :update-key)
   (update-key (getf argv :private-key)))
  ((getf argv :sign)
   (sign (getf argv :message)
         (getf argv :private-key)
         (getf argv :signature)))
  ((getf argv :verify)
   (verify (getf argv :message)
           (getf argv :signature)
           (getf argv :public-key))))
